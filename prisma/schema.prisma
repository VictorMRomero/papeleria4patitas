// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  inStock     Int
  price       Float    @default(0)
  slug        String   @unique
  tags        String[] @default([])
  createAt     DateTime @default(now())

  //relaciones
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  ProductImage ProductImage[]
  OrderItem    OrderItem[]

  descuento Descuento?


  //@@index{[category]}  ==> category es el areglo de las categorias
}

model Descuento{
    id  String @id @default(uuid())
    valor Int


    product   Product   @relation(fields: [productId], references: [id])
    productId String @unique
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  //
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(user)
  image         String?
  createAt     DateTime @default(now())

  address UserAddress?
  //relaciones
  Order   Order[]
  //Venta   Venta[]
  Venta   Venta[]
}

model Estado {
  id   String @id
  name String @unique

  userAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  calle      String
  detalle    String?
  localidad  String
  postalCode String
  phone      String
  referencia String?

  //Relaciones 
  estado   Estado @relation(fields: [estadoId], references: [id])
  estadoId String

  //1 a 1
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Order {
  id           String    @id @default(uuid())
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paidAt       DateTime?
  subTotal     Float
  total        Float

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relaciones
  user   User   @relation(fields: [userId], references: [id])
  userId String

  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float

  order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?

  product   Product @relation(fields: [productId], references: [id])
  productId String

  Venta   Venta?  @relation(fields: [ventaId], references: [id])
  ventaId String?
}

model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  calle      String
  detalle    String?
  localidad  String
  postalCode String
  phone      String
  referencia String?

  //Relaciones 
  estado   Estado @relation(fields: [estadoId], references: [id])
  estadoId String

  //1 a 1
  Order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}

model Venta {
  id           String   @id @default(uuid())
  itemsInOrder Int
  total        Float
  createAt     DateTime @default(now())

  transactionId String?

  //Relaciones
  user   User   @relation(fields: [userId], references: [id])
  userId String

  OrderItem OrderItem[]

}
